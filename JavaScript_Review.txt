除Object类型外,Array是最常用的类型,Array对象与其他语言相比有着自己的不同之处,首先同一数组对象的不同项可以保存不同类型的数据,其次数组对象的长短可以动态改变.

--创建Array对象的方式有两种

Array构造函数.
数组对象字面量

//Array构造函数
var colors = new Array();
var colors = new Array(20);
var colors = new Array('red','black','blue');

//数组对象字面量
var colors =['red','blue','black'];
var name =[];
var values = [1,2,];

--数组对象有一个length属性表示数组对象的长度,通过修改这个属性的值可以改变数组的长度


var colors = ["red", "blue", "green"]; // 创建一个包含3 个字符串的数组
var names = []; // 创建一个空数组
alert(colors.length); //3
alert(names.length); //0

colors.length = 2;
alert(colors[2]); //undefined

--数组检测
Array.isArray()方法


转换方法
数组的转换方法有：toString() toLoacalString() valueOf() join()

var colors = ["red", "blue", "green"]; // 创建一个包含3 个字符串的数组
alert(colors.toString()); // red,blue,green
alert(colors.valueOf()); // red,blue,green
alert(colors); // red,blue,green

//The join() method joins all elements of an array into a string.
alert(colors.join(",")); //red,green,blue
alert(colors.join("||")); //red||green||blue

values() method returns a new Array Iterator object that contains the values for each index in the array.
var arr = ['w', 'y', 'k', 'o', 'p'];
var eArr = arr.values();
console.log(eArr.next().value); // w
console.log(eArr.next().value); // y

--栈方法
栈是一种LIFO(Last-In-First-Out,后进先出)的数据结构,也就是新添加的项最早被移除.

push():向数组末尾添加项.
pop():从数组末尾移除项.
全选复制放进笔记
var colors = new Array();
var count = colors.push('red','green'); //推入两项
alert(count); //2

count = colors.push('black'); //推入一项
alert(count); //3

var item = colors.pop();  //移除一项
alert(item); //black
alert(colors.length); //2

--队列方法
队列是一种FIFO(First-In-First-Out,先进先出)的数据结构,也就是最先添加的项最早被移除

'shift()':从数组头部移除项.
unshift():向数组头部添加项.

--重排序方法
sort(): 在默认情况下，sort()方法按升序排列数组项——即最小的值位于最前面，最大的值排在最后面。为了实现排序，sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，以确定如何排序。即使数组中的每一项都是数值，sort()`方法比较的也是字符串
reverse(): 反转数组项的顺序.
全选复制放进笔记
var arr = [1,48,230,12];
arr.sort(); // [1, 12, 230, 48]

--操作方法
concat(): 数组拼接,并返回拼接后的结果.
slice() : slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下，slice()
方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项
splice():此方法有三个用途.
删除：可以删除任意数量的项，只需指定2 个参数：要删除的第一项的位置和要删除的项数。例如，splice(0,2)会删除数组中的前两项。
插入：可以向指定位置插入任意数量的项，只需提供3 个参数：起始位置、0（要删除的项数）和要插入的项。如果要插入多个项，可以再传入第四、第五，以至任意多个项。例如，splice(2,0,"red","green")会从当前数组的位置2 开始插入字符串"red"和"green"。
替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。例如，splice (2,1,"red","green")会删除当前数组位置2 的项，然后再从位置2 开始插入字符串"red"和"green"
tip:如果 slice()方法的参数中有一个负数，则用数组长度加上该数来确定相应的位置。


//concat()
var arr = ['red','black','blue'];
var result =  arr.concat(); // ['red','black','blue']
var result1 = arr.concat(['yellow','pink']); // ['red','black','blue','yellow','pink']
var result2 - arr.concat('white',['yellow','pink']); // ['red','black','blue','white','yellow','pink']

//slice()
var colors = ["red", "green", "blue", "yellow", "purple"];
var colors2 = colors.slice(1);
var colors3 = colors.slice(1,4);
alert(colors2); //green,blue,yellow,purple
alert(colors3); //green,blue,yellow
全选复制放进笔记
//splice()
var colors = ["red", "green", "blue"];
var removed = colors.splice(0,1); // 删除第一项
console.log(colors); // ['green','blue']
console.log(removed); // ['red'] 返回的数组中只包含一项

removed = colors.splice(1, 0, "yellow", "orange"); // 从位置1 开始插入两项
console.log(colors); // [`green`,`yellow`,`orange`,`blue`]
console.log(removed); // 返回的是一个空数组

removed = colors.splice(1, 1, "red", "purple"); // 插入两项，删除一项
console.log(colors); // [`green`,`red`,`purple`,`orange`,`blue`]
console.log(removed); // ['yellow'] 返回的数组中只包含一项

--位置方法
ECMAScript 5 为数组实例添加了两个位置方法：indexOf()和lastIndexOf()。这两个方法都接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。其中，indexOf()方法从数组的开头（位0）开始向后查找，lastIndexOf()方法则从数组的末尾开始向前查找.这两个方法都返回要查找的项在数组中的位置，或者在没找到的情况下返回-1.

全选复制放进笔记
var numbers = [1,2,3,4,5,4,3,2,1];
alert(numbers.indexOf(4)); //3
alert(numbers.lastIndexOf(4)); //5

alert(numbers.indexOf(4, 4)); //5
alert(numbers.lastIndexOf(4, 4)); //3

var person = { name: "Nicholas" };
var people = [{ name: "Nicholas" }];
var morePeople = [person];
alert(people.indexOf(person)); //-1
alert(morePeople.indexOf(person)); //0

--迭代方法
ECMAScript 5 为数组定义了5 个迭代方法。每个方法都接收两个参数：要在每一项上运行的函数和（可选的）运行该函数的作用域对象——影响this的值。传入这些方法中的函数会接收三个参数：数组项的值、该项在数组中的位置和数组对象本身。根据使用的方法不同，这个函数执行后的返回值可能会也可能不会影响方法的返回值。以下是这5 个迭代方法的作用。

every()：对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true
fiter(): 对数组中的每一项运行给定函数，返回该函数会返回true 的项组成的数组。
forEach()：对数组中的每一项运行给定函数。这个方法没有返回值。
map()：对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。
some()：对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。

var numbers = [1,2,3,4,5,4,3,2,1];
var everyResult = numbers.every(function(item, index, array){
return (item > 2);
});
alert(everyResult); //false


var someResult = numbers.some(function(item, index, array){
return (item > 2);
});
alert(someResult); //true

--归并方法
ECMAScript 5 还新增了两个归并数组的方法：reduce()和reduceRight()。这两个方法都会迭代数组的所有项，然后构建一个最终返回的值。其中，reduce()方法从数组的第一项开始，逐个遍历到最后。而reduceRight()则从数组的最后一项开始，向前遍历到第一项.

这两个方法都接收两个参数：一个在每一项上调用的函数和（可选的）作为归并基础的初始值。传给 reduce()和reduceRight()的函数接收4 个参数：前一个值、当前值、项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数就是数组的第二项。

全选复制放进笔记
var values = [1,2,3,4,5];
var sum = values.reduce(function(prev, cur, index, array){
return prev + cur;
});
console.log(sum); //15

var values = [1,2,3,4,5];
var sum = values.reduceRight(function(prev, cur, index, array){
return prev + cur;
});
alert(sum); //15

var sum = values.reduce(function(prev, cur, index, array){
return prev + cur;
}, 100);  //return 115


============================================
https://segmentfault.com/a/1190000005651715


1.数据类型、判断
最新的 ECMAScript 标准定义了 7 种数据类型：

string
number
boolean
undefined
null
symbol(new in ECMAScript 6)
object
注意：function array 皆是对象
1.1 数据的定义

null&undefined的区别和联系
undefined：未定义，没有被赋值的变量默认值是undefined
null:不存在
null == undefined // true
null === undefined // false
定义对象
访问对象属性&枚举
person.name // feifei
person["name"] // 在方括号内以字符串形式访问属性

var key = 'name'
person[key] //feifei

hasOwnProperty(obj.key)//检测key属性是否，是对象本身的属性值
forin,遍历对象的所有属性，包括原型链对象上的属性。＋hasOwnProperty，遍历对象自身属性。
注意：forin,乱序遍历对象属性。
for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
        console.log(i)
    }
  }
注意：因为for in 会遍历整个原型链的所有属性值，所以效率较for循环慢了很多。
相关方法：Object.keys()，Object.getOwnPropertyNames()有空看

删除对象属性：delet obj.key。注意，把属性设置为undefined或null是无效的
定义数组
数组可以保存任何值，并且可以混合保存
//2种方法创建数据, 构造函数和数组直接量，它们的区别？
var colors = new Array()//创建空数组
var colors = new Array(20)//传数值，创建length 20
var colors = new Array("red","blue","yellow")//
注意：可省略new字符
var colors = [];
var colors = ["red","blue","yellow"];
数组原生方法:http://yanhaijing.com/javascript/2014/01/17/fun-with-javascript-native-array-functions/
栈和队列.pop，.push，.shift和.unshift
排序.sort
连接.join和合并数组.concat
复制.slice(start,end)
截取.splice(index, howmany, element1, ….., elementX)
逆序.reverse
查找.indexOf(es5)
var a = [1,2,3];
[1,2,3].join //返回'1,2,3'
[1,2,3].concat(4,5)//返回新数组，[1,2,3,4,5]
[1,2,3].slice(0,2)//返回拷贝的新数组
//splice可以删除、插入、替换, 在原数组上修改
[1,2,3].splice(0,1)//[2,3]
[1,2,3].splice(0,0,0)//[0,1,2,3]
[1,2,3].splice(0,1,1)//[0,2,3]
[1,2,3].reverse//[3,2,1]
1.2 数据的判断

相等和比较 ＝＝ & ＝＝＝,推荐＝＝＝
typeof，实际应用场景检测一个对象是否已经定义或者是否已经赋值，而不是检查数据类型
instanceof
一些常见的考察点：
数组的判断
2.js基础
＝＝与＝＝＝的区别
== equality 等同，=== identity 恒等。
==， 两边值类型不同的时候，要先进行类型转换，再比较。 
===，不做类型转换，类型不同的一定不等
3.dom操作
4.事件机制
几个概念：事件流，事件冒泡，事件捕获
addEventListener(event,listener)&attachEvent("on"+event,listener)

5.原型继承面向对象
前端模块化（amd&cmd规范）
列表项目
6.闭包
7.this
8.跨域
